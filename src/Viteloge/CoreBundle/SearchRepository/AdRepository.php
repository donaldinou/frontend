<?php

namespace Viteloge\CoreBundle\SearchRepository {

    use FOS\ElasticaBundle\Repository as EntityRepository;
    use Viteloge\CoreBundle\SearchEntity\Ad;

    /**
     * AdRepository
     *
     * This class was generated by the Doctrine ORM. Add your own custom
     * repository methods below.
     */
    class AdRepository extends EntityRepository {

        /**
         *
         */
        public function getQueryForSearch(Ad $ad) {
            $boolQuery = new \Elastica\Query\Bool();

            if (!empty($ad->getTransaction())) {
                $fieldQuery = new \Elastica\Query\QueryString($ad->getTransaction());
                $fieldQuery->setDefaultField('transaction');
                $boolQuery->addMust($fieldQuery);
            }

            if (!empty($ad->getWhere())) {
                $cityQuery = new \Elastica\Query\Terms();
                $cityQuery->setTerms('inseeCity', $ad->getWhere());
                $boolQuery->addMust($cityQuery);
            }

            if (!empty($ad->getWhat())) {
                $cityQuery = new \Elastica\Query\Terms();
                $cityQuery->setTerms('type', $ad->getWhat());
                $boolQuery->addMust($cityQuery);
            }

            if (!empty($ad->getRooms())) {
                $fieldQuery = new \Elastica\Query\Terms();
                $fieldQuery->setTerms('rooms', $ad->getRooms());
                $fieldQuery->setMinimumMatch(1);
                $boolQuery->addMust($fieldQuery);
            }

            // rayon
            // new filter GeoDistance Elastica_Filter_GeoDistance

            if (!empty($ad->getMinPrice()) && !empty($ad->getMaxPrice())) {
                $boolQuery->addMust(
                    new \Elastica\Query\Range(
                        'price',
                        array(
                            'gte' => $ad->getMinPrice(),
                            'lte' => $ad->getMaxPrice()
                        )
                    )
                );
            }
            elseif(!empty($ad->getMinPrice())) {
                $boolQuery->addMust(
                    new \Elastica\Query\Range(
                        'price',
                        array(
                            'gte' => $ad->getMinPrice()
                        )
                    )
                );
            }
            elseif(!empty($ad->getMaxPrice())) {
                $boolQuery->addMust(
                    new \Elastica\Query\Range(
                        'price',
                        array(
                            'lte' => $ad->getMaxPrice()
                        )
                    )
                );
            }

            if (!$boolQuery->hasParam('should') && !$boolQuery->hasParam('must') && !$boolQuery->hasParam('must_not')) {
                $fieldQuery = new \Elastica\Query\MatchAll();
                $boolQuery->addMust($fieldQuery);
            }

            $query = new \Elastica\Query($boolQuery);
            $query->setSort(
                array(
                    'privilegeRank' => array(
                        'order' => 'DESC'
                    ),
                    'order' => array(
                        'order' => 'ASC'
                    )
                )
            );

            return $query;
        }

        /**
         *
         */
        public function search(Ad $ad, $limit=1000000) {
            $query = $this->getQueryForSearch($ad);
            return $this->find($query, $limit);
        }

    }


}
